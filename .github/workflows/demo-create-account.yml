name: DEMO CREATE ACCOUNT

on: 
  workflow_dispatch:
    inputs:
      port_payload:
        required: true
        description: Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)
        type: string

permissions:
  actions: read
  checks: read
  contents: write
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: write
  repository-projects: none
  security-events: none
  statuses: none

jobs:
  demo-create-account:
    runs-on: ubuntu-latest
    env:
      ACCOUNT_NAME: aws-c2-${{fromJson(inputs.port_payload).payload.properties.solution_name}}-${{fromJson(inputs.port_payload).payload.properties.account_environment}}
      ACCOUNT_EMAIL: accounts+${{fromJson(inputs.port_payload).payload.properties.account_name}}@nuvibit.com
      ACCOUNT_ENVIRONMENT: ${{fromJson(inputs.port_payload).payload.properties.account_environment}}
      COST_CENTER: ${{fromJson(inputs.port_payload).payload.properties.cost_center_id}}
      SECURITY_CONTACT_EMAIL: ${{fromJson(inputs.port_payload).payload.properties.security_contact_email}}
      PORT_USER_EMAIL: ${{fromJson(inputs.port_payload).trigger.by.user.email}}
      PORT_USER_FIRST_NAME: ${{fromJson(inputs.port_payload).trigger.by.user.firstName}}
      PORT_USER_LAST_NAME: ${{fromJson(inputs.port_payload).trigger.by.user.lastName}}
      PORT_RUN_ID: ${{fromJson(inputs.port_payload).context.runId}}
      PORT_BLUEPRINT: ${{fromJson(inputs.port_payload).context.blueprint}}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      # update run logs in getport.io - write pr
      - name: Update Run Logs - Write PR
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚úçÔ∏è writing new pull request..."

      # update aws account list
      - name: Update Account List
        run: |
          account_list_path="account_list.json"
          account_list=$(cat account_list.json)
          new_account=$(cat <<EOF 
          {
              "account_name": "$ACCOUNT_NAME",
              "account_email": "$ACCOUNT_EMAIL",
              "ou_path": "/root/workloads/$ACCOUNT_ENVIRONMENT",
              "close_on_deletion": true,
              "account_tags": {
                  "AccountOwner": "$PORT_USER_EMAIL",
                  "AccountType": "workload",
                  "AccountDescription": "This is a demo account",
                  "CostCenter": "$COST_CENTER"
              },
              "alternate_contacts": [
                  {
                      "type": "SECURITY",
                      "name": "Security Contact",
                      "email_address": "$SECURITY_CONTACT_EMAIL"
                  }
              ]
          }
          EOF)
          new_account_list=$(echo "$account_list" | jq --argjson newAcc "$new_account" '. += [$newAcc]')
          echo "$new_account_list" > $account_list_path

      # create pull request for new aws account
      - name: Create Pull Request
        id: pull-request
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "adding aws account '${{ env.ACCOUNT_NAME }}'"
          committer: GitHub <noreply@github.com>
          author: ${{ env.PORT_USER_FIRST_NAME }} ${{ env.PORT_USER_LAST_NAME }} <${{ env.PORT_USER_EMAIL }}>
          title: "create aws account '${{ env.ACCOUNT_NAME }}'"
          labels: Demo
          add-paths: account_list.json
          branch: demo-create-account
          branch-suffix: short-commit-hash
          delete-branch: true
          token: ${{ secrets.DEMO_GHE_API_TOKEN }}

      # update run logs in getport.io - wait for checks
      - name: Update Run Logs - Wait For Checks
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚è≤Ô∏è waiting for checks to pass..."

      # wait for pull request checks to succeed
      - name: Wait For PR Checks
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: wait-for-checks
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: terraform-workspace / workflow-summary
          ref: ${{ steps.pull-request.outputs.pull-request-head-sha }}

      # update run logs in getport.io - checks successful
      - name: Update Run Logs - Checks Successful
        if: steps.wait-for-checks.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚úÖ all checks passed successful"

      # update run logs in getport.io - checks failed
      - name: Update Run Logs - Checks Failed
        if: steps.wait-for-checks.outputs.conclusion == 'failure'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚ùå some checks failed"

      # update run logs in getport.io - approve pr
      - name: Update Run Logs - Approve PR
        if: steps.wait-for-checks.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "üëç approving pull request..."
    
      - name: Approve Pull Request
        if: steps.wait-for-checks.outputs.conclusion == 'success'
        uses: hmarr/auto-approve-action@v3
        with:
          pull-request-number: ${{ steps.pull-request.outputs.pull-request-number }}
          review-message: "Auto approved automated pull request"

      # update run logs in getport.io - merge pr
      - name: Update Run Logs - Merge PR
        if: steps.wait-for-checks.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚õô merging pull request..."

      - name: Merge Pull Request
        if: steps.wait-for-checks.outputs.conclusion == 'success'
        uses: juliangruber/merge-pull-request-action@v1
        id: merge
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.pull-request.outputs.pull-request-number }}
          method: squash
          repo: juliangruber/octokit-action

      # update run logs in getport.io - pr merged
      - name: Update Run Logs - PR Merged
        if: ${{ steps.merge.outcome == 'success' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚úÖ pull request was merged"

      # update run logs in getport.io - pr merge failed
      - name: Update Run Logs - PR Merge Failed
        if: ${{ steps.merge.outcome == 'failure' || steps.apply.outputs.exitcode == '1' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚ùå pull request could not be merged"

      # update run logs in getport.io - wait for account creation
      - name: Update Run Logs - Wait For Account Creation
        if: ${{ steps.merge.outcome == 'success' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚è≤Ô∏è waiting for creation of aws account '${{ env.ACCOUNT_NAME }}'..."

      # wait for pull request checks to succeed
      - name: Wait For Account Creation
        if: ${{ steps.merge.outcome == 'success' }}
        uses: fountainhead/action-wait-for-check@v1.1.0
        id: wait-for-apply
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: terraform-workspace / workflow-summary
          ref: ${{ steps.merge.outputs.commit }}

      # update run logs in getport.io - account created
      - name: Update Run Logs - Account Created
        if: steps.wait-for-apply.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚úÖ aws account '${{ env.ACCOUNT_NAME }}' was successfully created!"

      # update run logs in getport.io - account creation failed
      - name: Update Run Logs - Account Creation Failed
        if: steps.wait-for-apply.outputs.conclusion == 'failure'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚ùå aws account '${{ env.ACCOUNT_NAME }}' failed to create."

  #     # update run logs in getport.io - update catalog
  #     - name: Update Run Logs
  #       if: steps.wait-for-checks.outputs.conclusion == 'success'
  #       uses: port-labs/port-github-action@v1
  #       with:
  #         clientId: ${{ secrets.PORT_CLIENT_ID }}
  #         clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
  #         operation: PATCH_RUN
  #         runId: ${{ env.PORT_RUN_ID }}
  #         logMessage: "üõ†Ô∏è adding aws account '${{ env.ACCOUNT_NAME }}' to catalog..."

  #     # update getport.io catalog
  #     - name: Update Catalog
  #       if: steps.wait-for-checks.outputs.conclusion == 'success'
  #       uses: port-labs/port-github-action@v1
  #       with:
  #         clientId: ${{ secrets.PORT_CLIENT_ID }}
  #         clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
  #         operation: UPSERT
  #         runId: ${{ env.PORT_RUN_ID }}
  #         identifier: ${{ env.ACCOUNT_NAME }}
  #         icon: Aws
  #         blueprint: ${{ env.PORT_BLUEPRINT }}
  #         properties: |
  #           {
  #             "pull_request": "${{ steps.pull-request.outputs.pull-request-url }}",
  #             "account_name": "${{ env.ACCOUNT_NAME }}",
  #             "account_email": "${{ env.ACCOUNT_EMAIL }}",
  #             "ou_path": "/root/workloads/${{ env.ACCOUNT_ENVIRONMENT }}",
  #             "account_owner": "${{ env.PORT_USER_EMAIL }}",
  #             "cost_center": "${{ env.COST_CENTER }}",
  #             "alternate_contacts": "Security=${{ env.SECURITY_CONTACT_EMAIL }}"
  #           }

  # workflow-summary:
  #   needs:
  #     - wait-for-checks
  #   runs-on: ubuntu-latest
  #   if: ${{ always() }}

  #   steps:
  #     # update run logs in getport.io - almost done
  #     - name: Update Run Logs
  #       if: needs.wait-for-checks.outputs.conclusion == 'success'
  #       uses: port-labs/port-github-action@v1
  #       with:
  #         clientId: ${{ secrets.PORT_CLIENT_ID }}
  #         clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
  #         operation: PATCH_RUN
  #         runId: ${{ env.PORT_RUN_ID }}
  #         logMessage: "üèÅ you are almost at the finish line - follow this guide for the next steps:"

  #     # update run status in getport.io - success
  #     - name: Update Run Status
  #       if: needs.wait-for-checks.outputs.conclusion == 'success'
  #       uses: port-labs/port-github-action@v1
  #       with:
  #         clientId: ${{ secrets.PORT_CLIENT_ID }}
  #         clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
  #         operation: PATCH_RUN
  #         runId: ${{ env.PORT_RUN_ID }}
  #         status: "SUCCESS"
  #         logMessage: "üåê https://important-wiki/aws-account-next-steps"
  #         summary: "AWS Account '${{ env.ACCOUNT_NAME }}' successfully created"

  #     # update run logs in getport.io - something went wrong
  #     - name: Update Run Logs
  #       if: needs.wait-for-checks.outputs.conclusion == 'failure'
  #       uses: port-labs/port-github-action@v1
  #       with:
  #         clientId: ${{ secrets.PORT_CLIENT_ID }}
  #         clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
  #         operation: PATCH_RUN
  #         runId: ${{ env.PORT_RUN_ID }}
  #         logMessage: "üßØ something went wrong - follow this guide to troubleshoot:"

  #     # update run status in getport.io - failure
  #     - name: Update Run Status
  #       uses: port-labs/port-github-action@v1
  #       if: needs.wait-for-checks.outputs.conclusion == 'failure'
  #       with:
  #         clientId: ${{ secrets.PORT_CLIENT_ID }}
  #         clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
  #         operation: PATCH_RUN
  #         runId: ${{ env.PORT_RUN_ID }}
  #         status: "SUCCESS"
  #         logMessage: "üåê https://important-wiki/aws-account-troubleshooting"
  #         summary: "AWS Account '${{ env.ACCOUNT_NAME }}' failed to created"