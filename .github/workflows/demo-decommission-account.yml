name: DEMO DECOMMISSION ACCOUNT

on: 
  workflow_dispatch:
    inputs:
      port_payload:
        required: true
        description: Port's payload, including details for who triggered the action and general context (blueprint, run id, etc...)
        type: string

jobs:
  demo-decommission-account:
    runs-on: ubuntu-latest
    env:
      ACCOUNT_NAME: ${{fromJson(inputs.port_payload).payload.entity}}
      PORT_USER_EMAIL: ${{fromJson(inputs.port_payload).trigger.by.user.email}}
      PORT_USER_FIRST_NAME: ${{fromJson(inputs.port_payload).trigger.by.user.firstName}}
      PORT_USER_LAST_NAME: ${{fromJson(inputs.port_payload).trigger.by.user.lastName}}
      PORT_RUN_ID: ${{fromJson(inputs.port_payload).context.runId}}
      PORT_BLUEPRINT: ${{fromJson(inputs.port_payload).context.blueprint}}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      # update run logs in getport.io - write pr
      - name: Update Run Logs - Write PR
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚úçÔ∏è writing new pull request..."

      - name: Update Account List - Decommission existing account
        run: |
          account_list_path="account_list.json"
          account_list=$(cat account_list.json)
          new_account_list=$(echo "$account_list" | jq '.[] | select(.account_name=="${{ env.ACCOUNT_NAME }}").account_tags["AccountDecommission"] = true')
          echo "$new_account_list" > $account_list_path

      # create pull request for new aws account
      - name: Create Pull Request
        id: pull-request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "adding aws account '${{ env.ACCOUNT_NAME }}'"
          committer: GitHub <noreply@github.com>
          author: ${{ env.PORT_USER_FIRST_NAME }} ${{ env.PORT_USER_LAST_NAME }} <${{ env.PORT_USER_EMAIL }}>
          title: "delete aws account '${{ env.ACCOUNT_NAME }}'"
          labels: Demo
          add-paths: account_list.json
          branch: demo-delete-account
          branch-suffix: short-commit-hash
          delete-branch: true
          token: ${{ secrets.GHE_API_TOKEN }}

      # update run logs in getport.io - wait for checks
      - name: Update Run Logs - Wait For Checks
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚è≤Ô∏è waiting for checks to pass..."

      # wait for pull request checks to succeed
      - name: Wait For PR Checks
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-plan
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: spacelift/aws-c2-account-factory
          ref: ${{ steps.pull-request.outputs.pull-request-head-sha }}
          timeoutSeconds: 600
          intervalSeconds: 10

      # update run logs in getport.io - checks successful
      - name: Update Run Logs - Checks Successful
        if: steps.wait-for-plan.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚úÖ all checks passed successful"

      # update run logs in getport.io - checks failed
      - name: Update Run Logs - Checks Failed
        if: steps.wait-for-plan.outputs.conclusion != 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚ùå some checks failed"

      # update run logs in getport.io - approve pr
      - name: Update Run Logs - Approve PR
        if: steps.wait-for-plan.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "üëç approving pull request..."
    
      - name: Approve Pull Request
        if: steps.wait-for-plan.outputs.conclusion == 'success'
        uses: hmarr/auto-approve-action@v4
        with:
          pull-request-number: ${{ steps.pull-request.outputs.pull-request-number }}
          review-message: "Auto approved automated pull request"

      # update run logs in getport.io - merge pr
      - name: Update Run Logs - Merge PR
        if: steps.wait-for-plan.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚õô merging pull request..."

      - name: Merge Pull Request
        if: steps.wait-for-plan.outputs.conclusion == 'success'
        uses: juliangruber/merge-pull-request-action@v1.3.1
        id: merge-pr
        continue-on-error: true
        with:
          github-token: ${{ secrets.GHE_API_TOKEN }}
          number: ${{ steps.pull-request.outputs.pull-request-number }}
          method: squash
          repo: ${{ github.repository }}

      # update run logs in getport.io - pr merged
      - name: Update Run Logs - PR Merged
        if: ${{ steps.merge-pr.outcome == 'success' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚úÖ pull request was merged"

      # update run logs in getport.io - pr merge failed
      - name: Update Run Logs - PR Merge Failed
        if: ${{ steps.merge-pr.outcome != 'success' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚ùå pull request could not be merged"

      # update run logs in getport.io - wait for account deletion
      - name: Update Run Logs - Wait For Account Deletion
        if: ${{ steps.merge-pr.outcome == 'success' }}
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚è≤Ô∏è waiting for deletion of aws account '${{ env.ACCOUNT_NAME }}'..."

      # wait for pull request checks to succeed
      - name: Wait For Account Deletion
        if: ${{ steps.merge-pr.outcome == 'success' }}
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-apply
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: spacelift/aws-c2-account-factory
          ref: ${{ steps.merge-pr.outputs.commit }}
          timeoutSeconds: 600
          intervalSeconds: 10

      # update run logs in getport.io - account deleted
      - name: Update Run Logs - Account Deleted
        if: steps.wait-for-apply.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚úÖ aws account '${{ env.ACCOUNT_NAME }}' was successfully deleted!"

      # update run logs in getport.io - account deletion failed
      - name: Update Run Logs - Account Deletion Failed
        if: steps.wait-for-apply.outputs.conclusion != 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "‚ùå aws account '${{ env.ACCOUNT_NAME }}' failed to delete."

      # TODO: remove account from catalog
      # update getport.io catalog
      - name: Update Catalog
        id: port-entity
        if: steps.wait-for-apply.outputs.conclusion == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: UPSERT
          runId: ${{ env.PORT_RUN_ID }}
          identifier: ${{ env.ACCOUNT_NAME }}
          icon: AWS
          blueprint: ${{ env.PORT_BLUEPRINT }}
          properties: |
            {
              "account_name": "${{ env.ACCOUNT_NAME }}",
              "account_email": "${{ env.ACCOUNT_EMAIL }}",
              "ou_path": "/root/workloads/${{ env.ACCOUNT_ENVIRONMENT }}",
              "account_owner": "${{ env.PORT_USER_EMAIL }}",
              "cost_center": "${{ env.COST_CENTER }}",
              "security_contact": "${{ env.SECURITY_CONTACT_EMAIL }}"
            }

      - name: Account Deletion Outcome
        if: steps.wait-for-apply.outputs.conclusion != 'success'
        run: exit 1

  workflow-summary:
    needs:
      - demo-delete-account
    runs-on: ubuntu-latest
    if: ${{ always() }}
    env:
      ACCOUNT_NAME: aws-c2-${{fromJson(inputs.port_payload).payload.properties.solution_name}}-${{fromJson(inputs.port_payload).payload.properties.account_environment}}
      PORT_RUN_ID: ${{fromJson(inputs.port_payload).context.runId}}

    steps:
      # TODO: update log messages
      # update run logs in getport.io - almost done
      - name: Update Run Logs - Almost Done
        if: needs.demo-delete-account.result == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "üèÅ you are almost at the finish line - follow this guide for the next steps:"

      # update run status in getport.io - success
      - name: Update Run Status - Success
        if: needs.demo-delete-account.result == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: "SUCCESS"
          logMessage: "üåê https://wiki.example/aws-account-next-steps"
          summary: "AWS Account '${{ env.ACCOUNT_NAME }}' successfully deleted"

      # update run logs in getport.io - something went wrong
      - name: Update Run Logs - Something Went Wrong
        if: needs.demo-delete-account.result != 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "üßØ something went wrong - follow this guide to troubleshoot:"

      # update run status in getport.io - failure
      - name: Update Run Status - Failure
        uses: port-labs/port-github-action@v1
        if: needs.demo-delete-account.result != 'success'
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          status: "SUCCESS"
          logMessage: "üåê https://wiki.example/aws-account-troubleshooting"
          summary: "AWS Account '${{ env.ACCOUNT_NAME }}' failed to delete"